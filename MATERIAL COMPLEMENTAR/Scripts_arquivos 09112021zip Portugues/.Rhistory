install.packages("tidyverse")
library("tidyverse")
library(readxl)
dataset_inicial <- read_excel("(1.2) Dataset Aula Data Wrangling.xls")
View(dataset_inicial)
dataset_merge <- read_excel("(1.3) Dataset Aula Data Wrangling (Join).xls")
View(dataset_inicial) # Mostra a base de dados completa em uma nova aba
head(dataset_inicial, n=5) # Mostra as 5 primeiras observações da base de dados
str(dataset_inicial) # Mostra a estrutura da base de dados
glimpse(dataset_inicial) # Função parecida com a str
print(dataset_inicial) # Apresenta a base de dados no console
dim(dataset_inicial) # As dimensões do dataset: linhas e colunas, respectivamente
names(dataset_inicial) # Para ver os nomes das variáveis
dataset_inicial$`Tempo para chegar à escola (minutos)`
dataset_inicial$`Quantidade de semáforos`
names(dataset_inicial)
novos_nomes <- c("Observações",
"Tempo para chegar",
"Distância percorrida",
"Semáforos",
"Período",
"Perfil")
print(novos_nomes)
names(dataset_inicial) <- novos_nomes
head(dataset_inicial, n=5)
nova_base <- rename(dataset_inicial,
observacoes = Observações,
tempo = "Tempo para chegar",
distancia = "Distância percorrida",
semaforos = "Semáforos",
periodo = "Período",
perfil = "Perfil")
View(nova_base)
nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil)
nova_base_pipe <- nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil)
View(nova_base_pipe)
head(nova_base_pipe, n=5)
rm(nova_base_pipe) # Remove o objeto especificado do ambiente
nova_base %>% rename(obs = 1,
temp = 2,
dist = 3,
sem = 4,
per = 5,
perf = 6)
nova_base %>% rename(sem = 4,
perf = 6)
base_covid <- read.csv("(2.2) WHO COVID-19 Global Table.csv",
header = TRUE,
sep = ",",
dec = ".")
dim(base_covid)
View(base_covid)
names(base_covid)
base_covid <- base_covid %>% rename(nome = 1,
regiao = 2,
casos_total = 3,
casos_relativo = 4,
casos_semana = 5,
casos_semana_relativo = 6,
casos_dia = 7,
mortes_total = 8,
mortes_relativo = 9,
mortes_semana = 10,
mortes_semana_relativo = 11,
mortes_dia = 12,
tipo_transmissao = 13)
View(base_covid)
variavel_nova_1 <- c(1,2,3,4,5,6,7,8,9,10)
variavel_nova_2 <- c(11:20)
print(variavel_nova_1)
print(variavel_nova_2)
View(nova_base)
base_inclui <- mutate(nova_base,
variavel_nova_1,
variavel_nova_2)
View(base_inclui)
View(nova_base)
nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil) %>%
mutate(variavel_nova_1,
variavel_nova_2,
temp_novo = tempo*2)
nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil) %>%
mutate(variavel_nova_1,
variavel_nova_2,
temp_novo = temp*2)
base_texto_1 <- mutate(nova_base,
semaforos = replace(semaforos, semaforos==0, "Zero"),
semaforos = replace(semaforos, semaforos==1, "Um"),
semaforos = replace(semaforos, semaforos==2, "Dois"),
semaforos = replace(semaforos, semaforos==3, "Três"))
View(base_texto_1)
head(base_texto_1)
View(nova_base)
base_texto_2 <- mutate(nova_base,
perfil_novo = recode(perfil,
"calmo"="perfil 1",
"moderado"="perfil 2",
"agressivo"="perfil 3"))
head(base_texto_2)
# Vamos utizar o "recode" para transformar um texto em valores:
#
base_texto_valores <- mutate(nova_base,
periodo = recode(periodo,
"Manhã"=0,
"Tarde"=1))
head(base_texto_valores)
base_dummy <- mutate(nova_base, perfil_agressivo = recode(perfil,
"agressivo"=1,
"moderado"=0,
"calmo"=0),
perfil_moderado = recode(perfil,
"agressivo"=0,
"moderado"=1,
"calmo"=0),
perfil_calmo = recode(perfil,
"agressivo"=0,
"moderado"=0,
"calmo"=1))
View(base_dummy)
View(base_covid)
table(base_covid$tipo_transmissao)
unique(base_covid$tipo_transmissao)
base_covid <- base_covid[-c(1),] # excluída pelo número de sua linha
base_covid <- base_covid[!(base_covid$nome=="Other"),] # excluída por seu nome
base_covid <- base_covid %>% mutate(tipo_transmissao = recode(tipo_transmissao,
"Clusters of cases" = "Casos Concentrados",
"Community transmission" = "Transmissão Comunitária",
"No cases" = "Sem Casos",
"Not applicable" = "Não Aplicável",
"Pending" = "Pendente",
"Sporadic cases" = "Casos Esporádicos")) %>%
mutate(grupos = cut(casos_relativo,
c(-Inf, quantile(base_covid$casos_relativo,
type = 5,
probs = c(0.25, 0.50, 0.75),
TRUE),Inf),
c("primeiro quartil",
"segundo quartil",
"terceiro quartil",
"quarto quartil")))
o
table(base_covid$grupos)
base_exclui <- transmute(nova_base,
observacoes, tempo,
variavel_nova_1, variavel_nova_2)
View(base_exclui)
base_exclui_rename <- nova_base %>% transmute(observacoes, tempo,
variavel_nova_1) %>%
mutate(tempo_novo = recode(tempo,
"10"="dez",
"15"="quinze",
"20"="vinte",
"25"="vinte e cinco",
"30"="trinta",
"35"="trinta e cinco",
"40"="quarenta",
"50"="cinquenta",
"55"="cinquenta e cinco")) %>%
mutate(posicao = cut(tempo,
c(0, median(tempo), Inf),
c("menores",
"maiores")))
median(nova_base$tempo)
selecao_1 <- nova_base[,c("observacoes","tempo")] # critérios após a vírgula
selecao_2 <- nova_base[,1:3] # selecionando pela posição das colunas de 1 a 3
View(selecao_2)
extrai_parte_1 <- nova_base[3:7, c("observacoes", "perfil")]
View(extrai_parte_1)
extrai_parte_2 <- nova_base[3:7, 1:2]
View(extrai_parte_2)
base_select_1 <- select(nova_base, observacoes, tempo) # especificando
base_select_2 <- select(nova_base,  everything(), -perfil) # todas menos uma
base_select_3 <- select(nova_base, observacoes:distancia) # de uma a outra
base_select_4 <- select(nova_base, starts_with("p")) # para algum prefixo comum
nova_base %>% select(observacoes, perfil, everything())
View(nova_base)
nova_base %>% relocate(perfil, .after = observacoes)
nova_base %>% relocate(perfil, .before = tempo)
nova_base %>% select(tempo, semaforos, perfil, observacoes)
vetor_pull <- nova_base %>% pull(var = 3)
vetor_pull
print(vetor_pull)
base_covid <- base_covid %>% select(nome,
regiao,
grupos,
everything(),
-mortes_dia)
jogos <- read.csv("(5.2) Champions League 2020-2021.csv")
View(jogos)
glimpse(jogos)
View(jogos)
library(tidyverse)
jogos <- jogos %>% mutate(time_vencedor = case_when(
c(jogos$team_home_score-jogos$team_away_score)==0 ~ "empate",
c(jogos$team_home_score-jogos$team_away_score)>0 ~ "mandante",
c(jogos$team_home_score-jogos$team_away_score)<0 ~ "visitante")) %>%
relocate(time_vencedor, .after = team_away_score)
View(jogos)
table(jogos$time_vencedor)
select(jogos$time_vencedor)
table(jogos$time_vencedor)
library(tidyverse)
library(readxl)
Sys.localeconv()
dataset_inicial <- read_excel("(1.2) Dataset Aula Data Wrangling.xls")
head(dataset_inicial)
str(dataset_inicial)
glimpse(dataset_inicial)
#criando um vetor c contendo os novos nomes
novos_nomes <- c("Observações",
"Tempo para Chegar",
"Distância Percorrida",
"Semáforos",
"Período",
"Perfil")
print(novos_nomes) #conferindo
names(dataset_inicial) <- novos_nomes #atribuindo o vetor de nomes ao dataset
names(dataset_inicial) #projetando os nomes das vars do dataset ja alterados
print(dataset_inicial) #conferindo os nomes das variáveis (colunas)
nova_base <- rename(dataset_inicial,
observacoes = "Observações",
tempo = "Tempo para Chegar",
distancia = "Distância Percorrida",
semaforos = "Semáforos",
periodo = "Período",
perfil = "Perfil")
#conferindo a crição do novo dataset (nova_base) com os nomes das vars alterados
names(nova_base)
names(dataset_inicial) #dataset original não sofreu alteração
#conferindo os nomes das vars
names(nova_base)
#projetando o dataset com os nomes das vars alterados, utilizando PIPE ( %>% )
#ainda assim, o nome original das vars não foi alterado
nova_base %>%  rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil)
#verificando que o nome original das vars nao sofreu alteração
names(nova_base)
#nova base criada com base em nova_base com os nomes das vars alteradas
nova_base_pipe <- nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil)
#conferindo
names(nova_base_pipe)
head(nova_base_pipe,3)
#editando os nomes das vars no proprio dataset.
#nesse caso, o dataset original foi alterado
nova_base_pipe <- nova_base_pipe %>% rename(ob = obs,
te = temp,
di = dist,
se = sem,
pe = per,
pf = perf)
#conferindo
names(nova_base_pipe)
rm(nova_base_pipe) #removendo o objeto nova_base_pipe
#verificando o nome da var original
names(nova_base)
#substituino o nome_original pelo indice da coluna
nova_base %>% rename(obs = 1,
temp = 2,
dist = 3,
sem = 4,
per = 5,
perf = 6)
#certificando que o nome original da var não foi alterado
names(nova_base)
var_1 <- c(1,2,3,4,5,6,7,8,9,10) #nessa estrutura seq o tipo gerado será dbl
print(var_1)
var_2 <- c(11:20) #nesse estrutura de intervalos o tipo gerado será int
print(var_2)
var_3 <- c(11)
length(var_1) #calcula o tamanho da var
length(var_2)
#confirindo o objeto que iremos incluir as duas vars criadas
print(nova_base)
#add as novas vars ao objeto
#as vars add precisam ter o mesmo tamanho do objeto ou == 1.
base_inclui <- mutate(nova_base,
var_1,
var_2,
var_3)
#add as novas vars ao objeto
#as vars add precisam ter o mesmo tamanho do objeto ou == 1.
base_inclui <- mutate(nova_base,
var_1,
var_2,
var_3)
#criando a var sobrenome
sobrenome <- c("Santos", "Souza", "Luz", "Silva", "Pereira",
"Amaral","Lima", "Belfort", "Galvao", "Duarte")
#projetando a base_inclui com a add da var sobrenome
base_inclui %>% mutate(sobrenome)
base_inclui <- base_inclui %>% mutate(sobrenome)
idade <- c(32, 41, 29, 55, 62, 34, 56, 36, 47, 50)
#relembrando o objeto
names(base_inclui)
idade <- c(32, 41, 29, 55, 62, 34, 56, 36, 47, 50)
#relembrando o objeto
names(base_inclui)
#projetanto a var idade junto com o a alteração do nome das vars com PIPE
base_inclui %>% mutate(idade) %>%
rename(Nome = 1,
Tempo = 2,
Distancia = 3,
Semaforos = 4,
Periodo = 5,
Perfil = 6,
Var1 = 7,
Var2 = 8,
Var3 = 9,
Sobrenome = 10,
Idade = 11)
base_x <-  base_inclui %>% mutate(idade) %>%
rename(Nome = 1,
Tempo = 2,
Distancia = 3,
Semaforos = 4,
Periodo = 5,
Perfil = 6,
Var1 = 7,
Var2 = 8,
Var3 = 9,
Sobrenome = 10,
Idade = 11)
print(base_x)
base_x %>% mutate(Semaforos = replace(Semaforos, Semaforos==0,"Zero"),
Semaforos = replace(Semaforos, Semaforos==1,"Um"),
Semaforos = replace(Semaforos, Semaforos==2,"Dois"),
Semaforos = replace(Semaforos,Semaforos==3,"Tres")
)
head(nova_base)
head(base_x)
mutate(base_x, Num_Perfil = recorde(Perfil,
"calmo"=0,
"moderado"=1,
"agressivo"=2))
mutate(base_x, Num_Perfil = recorde(Perfil,
"calmo"="0",
"moderado"="1",
"agressivo"="2"))
mutate(base_x, Num_Perfil = recorde(Perfil,
"calmo"="0",
"moderado"="1",
"agressivo"="2"))
mutate(base_x, Num_Perfil = recode(Perfil,
"calmo"="0",
"moderado"="1",
"agressivo"="2"))
mutate(base_x, Num_Perfil = recode(Perfil,
"calmo"=0,
"moderado"=1,
"agressivo"=2))
mutate(base_x),Turno = recode(Periodo,
"Manhã"=1,
"Tarde"=2,
"noite"=3)
mutate(base_x,Turno = recode(Periodo,
"Manhã"=1,
"Tarde"=2,
"Noite"=3))
# Função "transmute": inclui variáveis no dataset, excluindo as existentes
# Depois de informar o dataset, informe as variáveis mantidas e adicionadas
head(base_inclui)
base_teste <- nova_base
head(base_teste)
transmute(base_teste,sobrenome, observacoes, distancia)
sobrenome <- c(a,b,c,d,e,f,g,h,i,j)
sobrenome <- c(a,b,c,d,e,f,g,h,i,j)
sobrenome <- c("a","b","c","d","e","f","g","h","i",""j")
transmute(base_teste,sobrenome, observacoes, distancia)
sobrenome <- c("a","b","c","d","e","f","g","h","i",""j")
transmute(base_teste,sobrenome, observacoes, distancia)
inicial <- c("GS","DS","GL","LS","LP","LA","AL","AB","JG","MD")
transmute(base_teste,inicial, observacoes, distancia)
base_teste <- transmute(base_teste,inicial, observacoes, distancia)
head(base_teste)
?cut
mutate(base_teste,distancia_m = cut(distancia,
c(5,median(distancia),28)
c("acima","abaixo"))
)
mutate(base_teste,distancia_m = cut(distancia,
c(5,median(distancia),28),
c("acima","abaixo"))
)
mutate(base_teste,distancia_m = cut(distancia,
c(0,median(distancia),32),
c("acima","abaixo"))
)
median(distancia)
median?
mutate(base_teste,distancia_m = cut(distancia,
c(0,median(distancia),32),
c("acima","abaixo"))
)
median(?)
median?
a
median(as.integer(distancia))
head(base_teste)
median(base_teste$distancia)
median(base_teste$distancia)
mutate(base_teste,distancia_m = cut(distancia,
c(0,median(distancia),32),
c("acima","abaixo"))
)
mutate(base_teste,distancia_m = cut(distancia,
c(0,median(distancia),32),
c("abaixo","acima"))
)
head(nova_base)
mutate(nova_base, tempo_m = cut(tempo_m,
c(0,median(tempo),40),
c("T_inferior","T_superior")
)
)
mutate(nova_base, tempo_m = cut(tempo,
c(0,median(tempo),40),
c("T_inferior","T_superior")
)
)
mutate(nova_base, tempo_m = cut(tempo,
c(0,median(tempo),55),
c("T_inferior","T_superior")
)
)
head(base_x)
mutate(base_x, idade_m = cut(idade,
c(0,median(idade),62),
c("I_Inferior","I_Superior")
)
)
median(base_x$Idade)
mutate(base_x, idade_m = cut(idade,
c(0,media(idade),62),
labels = c("Jovem","Adulto")
)
)
mutate(base_x, idade_m = cut(idade,
c(0,median(idade),62),
labels = c("Jovem","Adulto")
)
)
mutate(base_x, idade_quart = cut(idade,
quantile(idade,type = 5, 0.75)))
